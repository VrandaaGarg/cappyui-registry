{
  "name": "multi-factor-authentication",
  "type": "registry:ui",
  "title": "Multi-Factor Authentication",
  "description": "An animated OTP input component that showcases multi-factor authentication with sequential digit entry animation, border highlighting, and smooth transitions.",
  "dependencies": ["framer-motion", "tailwind-merge", "clsx"],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ui/multi-factor-authentication.tsx",
      "content": "\"use client\";\n\nimport React, { memo, useEffect, useRef, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MultiFactorProps {\n  className?: string;\n}\n\n// Animation constants\nconst MOVE_DURATION = 0.3; // Duration to move border to next field\nconst DIGIT_DELAY = 0.2; // Delay after border arrives before digit appears\nconst COMPLETE_DELAY = 0.15; // Delay before showing all borders\nconst POP_DURATION = 0.4; // Duration for popping animation\nconst HOLD_DURATION = 0.5; // How long to hold the complete code\nconst CYCLE_DELAY = 0.4; // Delay before starting next cycle\n\n// Sample OTP digits that will be animated\nconst OTP_DIGITS = [\"3\", \"5\", \"8\", \"1\", \"2\", \"9\"];\n\n// Pre-create arrays to avoid re-creating on every render\nconst BORDER_INDICES = Array.from({ length: 6 }, (_, i) => i);\nconst EMPTY_DIGITS = Array(6).fill(\"\");\n\nexport const MultiFactor = memo(({ className }: MultiFactorProps) => {\n  const [displayedDigits, setDisplayedDigits] = useState<string[]>(EMPTY_DIGITS);\n  const [borderPosition, setBorderPosition] = useState(-1);\n  const [isAllComplete, setIsAllComplete] = useState(false);\n  const [poppingIndices, setPoppingIndices] = useState<Set<number>>(new Set());\n  const [isDesktop, setIsDesktop] = useState(false);\n\n  // Store all timeout IDs for proper cleanup\n  const timeoutIdsRef = useRef<Set<NodeJS.Timeout>>(new Set());\n\n  // Track screen size for responsive spacing with debounce\n  useEffect(() => {\n    let resizeTimeout: NodeJS.Timeout;\n\n    const checkScreenSize = () => {\n      const isDesktopSize = window.innerWidth >= 768;\n      if (isDesktopSize !== isDesktop) {\n        setIsDesktop(isDesktopSize);\n      }\n    };\n\n    const handleResize = () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(checkScreenSize, 150);\n    };\n\n    checkScreenSize();\n    window.addEventListener(\"resize\", handleResize, { passive: true });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      clearTimeout(resizeTimeout);\n    };\n  }, [isDesktop]);\n\n  useEffect(() => {\n    const addTimeout = (id: NodeJS.Timeout) => {\n      timeoutIdsRef.current.add(id);\n    };\n\n    const runAnimation = () => {\n      // Reset state\n      setDisplayedDigits([...EMPTY_DIGITS]);\n      setBorderPosition(-1);\n      setIsAllComplete(false);\n      setPoppingIndices(new Set());\n\n      const startClearingSequence = () => {\n        // Hold complete state briefly, then clear all at once\n        const holdTimeout = setTimeout(() => {\n          setIsAllComplete(false);\n          setDisplayedDigits([...EMPTY_DIGITS]);\n\n          // Restart animation after clearing\n          const cycleTimeout = setTimeout(() => {\n            runAnimation();\n          }, CYCLE_DELAY * 1000);\n          addTimeout(cycleTimeout);\n        }, HOLD_DURATION * 1000);\n        addTimeout(holdTimeout);\n      };\n\n      const animateNextDigit = (index: number) => {\n        if (index >= 6) {\n          // All digits are filled, show borders on all fields\n          setBorderPosition(-1); // Hide moving border\n          setIsAllComplete(true);\n\n          // Start simultaneous popping animation\n          const completeTimeout = setTimeout(() => {\n            // Pop all borders at once\n            setPoppingIndices(new Set([0, 1, 2, 3, 4, 5]));\n\n            // After pop completes, start clearing sequence\n            const popTimeout = setTimeout(() => {\n              startClearingSequence();\n            }, POP_DURATION * 1000);\n            addTimeout(popTimeout);\n          }, COMPLETE_DELAY * 1000);\n          addTimeout(completeTimeout);\n          return;\n        }\n\n        // Move border to current position\n        setBorderPosition(index);\n\n        // After border moves, show the digit\n        const moveTimeout = setTimeout(() => {\n          setDisplayedDigits((prev) => {\n            const newDigits = [...prev];\n            newDigits[index] = OTP_DIGITS[index];\n            return newDigits;\n          });\n\n          // Move to next digit after a short delay\n          const digitTimeout = setTimeout(() => {\n            animateNextDigit(index + 1);\n          }, DIGIT_DELAY * 1000);\n          addTimeout(digitTimeout);\n        }, MOVE_DURATION * 1000);\n        addTimeout(moveTimeout);\n      };\n\n      // Start the animation sequence\n      const initialTimeout = setTimeout(() => {\n        animateNextDigit(0);\n      }, 500); // Initial delay\n      addTimeout(initialTimeout);\n    };\n\n    runAnimation();\n\n    // Cleanup all timeouts on unmount\n    return () => {\n      const timeouts = timeoutIdsRef.current;\n      timeouts.forEach((id) => clearTimeout(id));\n      timeouts.clear();\n    };\n  }, []);\n\n  return (\n    <div\n      className={cn(\"flex items-center justify-center p-3 md:p-8\", className)}\n    >\n      <div className=\"w-full max-w-lg mx-auto\">\n        {/* Container with rounded border */}\n        <div className=\"relative p-6 md:p-12 rounded-sm md:rounded-xl border border-neutral-300/40 dark:border-neutral-700/30 outline-2 outline-neutral-200/70 dark:outline-neutral-800/40  bg-white dark:bg-neutral-900/20\">\n          {/* OTP Input Fields */}\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"relative flex gap-3 md:gap-4\">\n              {/* Moving blue Border */}\n              <motion.div\n                className=\"absolute w-9 h-12 md:w-16 md:h-20 rounded-sm md:rounded-xl border-[3px] border-blue-400 dark:border-blue-500 bg-blue-50/30 dark:bg-blue-950/30 shadow-lg shadow-blue-500/50 pointer-events-none z-10\"\n                initial={{ opacity: 0, scale: 1, x: 0 }}\n                animate={{\n                  opacity: borderPosition >= 0 && !isAllComplete ? 1 : 0,\n                  scale: borderPosition >= 0 ? [1, 1.08, 1] : 1,\n                  x:\n                    borderPosition >= 0\n                      ? borderPosition * (isDesktop ? 80 : 48)\n                      : borderPosition === -1 && isAllComplete\n                      ? 5 * (isDesktop ? 80 : 48)\n                      : 0,\n                }}\n                transition={{\n                  x: {\n                    duration: MOVE_DURATION,\n                    ease: [0.25, 0.1, 0.25, 1],\n                  },\n                  scale: {\n                    duration: MOVE_DURATION,\n                    ease: [0.34, 1.56, 0.64, 1],\n                  },\n                  opacity: {\n                    duration: 0.15,\n                    ease: \"easeOut\",\n                  },\n                }}\n              >\n                <motion.div\n                  className=\"absolute bottom-2 h-[1.5px] w-[70%] left-1/2 -translate-x-1/2 bg-blue-500 \"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.2, ease: \"easeOut\" }}\n                />\n              </motion.div>\n\n              {/* Individual Borders for Complete State - Same styling as moving border */}\n              {BORDER_INDICES.map((index) => {\n                const isPopping = poppingIndices.has(index);\n                return (\n                  <motion.div\n                    key={`border-${index}`}\n                    className=\"absolute w-9 h-12 md:w-16 md:h-20 rounded-sm md:rounded-xl border-[2.5px] border-blue-400 dark:border-blue-500 bg-blue-50/30 dark:bg-blue-950/30 shadow-lg shadow-blue-500/50 pointer-events-none z-10\"\n                    initial={{ opacity: 0, scale: 1 }}\n                    animate={{\n                      opacity: isPopping ? [1, 0] : isAllComplete ? 1 : 0,\n                      scale: isPopping ? [1, 1.3] : 1,\n                    }}\n                    style={{\n                      left: `${index * (isDesktop ? 80 : 48)}px`,\n                      top: 0,\n                    }}\n                    transition={{\n                      opacity: {\n                        duration: 0.5,\n                        ease: \"easeOut\",\n                      },\n                      scale: {\n                        duration: 0.5,\n                        ease: [0.34, 1.56, 0.64, 1],\n                      },\n                    }}\n                  />\n                );\n              })}\n\n              {/* Input Fields */}\n              {BORDER_INDICES.map((index) => {\n                const isPopping = poppingIndices.has(index);\n                const hasDigit = !!displayedDigits[index];\n                return (\n                  <div\n                    key={index}\n                    className={cn(\n                      \"relative w-9 h-12 md:w-16 md:h-20 rounded-sm md:rounded-xl border\",\n                      \"flex items-center justify-center text-xl md:text-2xl font-bold\",\n                      \"border-neutral-300 dark:border-neutral-700/50 bg-white dark:bg-neutral-900 shadow-lg shadow-neutral-400/10\"\n                    )}\n                  >\n                    {/* Digit Display */}\n                    <motion.span\n                      key={`${index}-${displayedDigits[index]}`}\n                      initial={{ opacity: 0, scale: 0.3, y: 10 }}\n                      animate={{\n                        opacity: hasDigit ? (isPopping ? [1, 0] : 1) : 0,\n                        scale: hasDigit ? (isPopping ? [1, 1.15] : 1) : 0.3,\n                        y: hasDigit ? 0 : 10,\n                      }}\n                      transition={{\n                        opacity: {\n                          duration: isPopping ? 0.5 : 0.2,\n                          ease: \"easeOut\",\n                        },\n                        scale: {\n                          duration: isPopping ? 0.5 : 0.2,\n                          ease: isPopping ? [0.34, 1.56, 0.64, 1] : \"easeOut\",\n                        },\n                        y: { duration: 0.2, ease: \"easeOut\" },\n                      }}\n                      className=\"text-neutral-900 text-[12px] md:text-base font-mono dark:text-neutral-100\"\n                    >\n                      {displayedDigits[index]}\n                    </motion.span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Description Text */}\n          <div className=\"text-center font-mono flex flex-col gap-1 mt-12\">\n            <motion.span\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.05, duration: 0.3 }}\n              className=\"text-sm  text-neutral-900 dark:text-neutral-100\"\n            >\n              Enter the OTP sent to your Email\n            </motion.span>\n            <motion.span\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2, duration: 0.3 }}\n              className=\"text-xs text-neutral-600 dark:text-neutral-400\"\n            >\n              Check your inbox for the 6-digit verification code\n            </motion.span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nMultiFactor.displayName = \"MultiFactor\";\n",
      "type": "registry:ui",
      "target": "components/ui/multi-factor-authentication.tsx"
    }
  ]
}
