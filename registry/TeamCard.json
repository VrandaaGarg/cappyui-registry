{
  "name": "team-card",
  "type": "registry:ui",
  "title": "Team Card",
  "description": "An animated team showcase component with a 2x2 grid displaying team member cards with an intelligent scanning border effect that highlights each member sequentially.",
  "dependencies": ["framer-motion", "tailwind-merge", "clsx"],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ui/team-card.tsx",
      "content": "\"use client\";\n\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TeamCardProps {\n  className?: string;\n}\n\ninterface TeamMember {\n  name: string;\n  role: string;\n  image: string;\n}\n\n// Team members with basic bio for the callout tags.\nconst TEAM_MEMBERS: TeamMember[] = [\n  {\n    name: \"Raj Gupta\",\n    role: \"Chief Executive Officer\",\n    image:\n      \"https://img.freepik.com/premium-photo/happy-proud-prosperous-mid-aged-mature-professional-asian-business-man-ceo-executive-wearing-suit-standing-office-arms-crossed-looking-away-thinking-success-leadership-side-profile-view_220770-5137.jpg\",\n  },\n  {\n    name: \"Anita Desai\",\n    role: \"Head of Product\",\n    image:\n      \"https://img.freepik.com/premium-photo/portrait-business-woman-with-arms-crossed-office_770200-4875.jpg\",\n  },\n  {\n    name: \"Michael Chen\",\n    role: \"Engineering Director\",\n    image:\n      \"https://img.freepik.com/premium-photo/portrait-man-businessman-corporate-man-with-smiling-face_1118350-346.jpg\",\n  },\n  {\n    name: \"Priya Singh\",\n    role: \"Design Lead\",\n    image:\n      \"https://static.vecteezy.com/system/resources/previews/029/771/918/large_2x/portrait-of-a-beautiful-businesswoman-in-modern-office-asian-manager-looking-at-camera-and-smiling-confident-female-ceo-planning-and-managing-company-free-photo.jpeg\",\n  },\n];\n\n// Animation timing - each image is active for 2 seconds\nconst SCAN_DURATION = 2; // Duration for each image scan\nconst TOTAL_DURATION = SCAN_DURATION * TEAM_MEMBERS.length; // Total cycle duration\n\n// Sequences keep the scanning frame looping while card content lingers just long enough.\nconst FRAME_SEQUENCE = [0, 0, 1, 1, 2, 2, 3, 3, 0] as const;\nconst FRAME_KEYFRAME_TIMES = [0, 0.07, 0.25, 0.32, 0.5, 0.57, 0.75, 0.88, 1];\nconst CARD_SEQUENCE = [0, 0, 1, 1, 2, 2, 3, 3, 0] as const;\nconst CARD_KEYFRAME_TIMES = FRAME_KEYFRAME_TIMES;\nconst SMOOTH_EASE = [0.45, 0, 0.55, 1] as const;\n\nconst ACTIVE_IMAGE_SCALE = 1.05;\n\n// Debounce delay for measurements to prevent excessive updates\nconst MEASUREMENT_DEBOUNCE_MS = 100;\n\nconst getImageAnimation = (activeIndex: number) => {\n  const filter = CARD_SEQUENCE.map((positionIndex) =>\n    positionIndex === activeIndex ? \"grayscale(0%)\" : \"grayscale(100%)\"\n  );\n\n  const scale = CARD_SEQUENCE.map((positionIndex) =>\n    positionIndex === activeIndex ? ACTIVE_IMAGE_SCALE : 1\n  );\n\n  return { filter, scale };\n};\n\nconst getTagAnimation = (activeIndex: number) => {\n  const opacity = CARD_SEQUENCE.map((positionIndex) =>\n    positionIndex === activeIndex ? 1 : 0\n  );\n\n  const y = CARD_SEQUENCE.map((positionIndex) =>\n    positionIndex === activeIndex ? 0 : 12\n  );\n\n  return { opacity, y };\n};\n\nexport const TeamCard = memo(({ className }: TeamCardProps) => {\n  const gridRef = useRef<HTMLDivElement | null>(null);\n  const cardRefs = useRef<(HTMLDivElement | null)[]>([]);\n  const measurementTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const isAnimatingRef = useRef(false);\n  const [cardPositions, setCardPositions] = useState<\n    { x: number; y: number }[]\n  >([]);\n  const [frameSize, setFrameSize] = useState({ width: 0, height: 0 });\n  const [frameRadius, setFrameRadius] = useState(0);\n\n  // Debounced measurement function to prevent excessive updates during animation\n  const debouncedUpdateMeasurements = useCallback(() => {\n    // Clear existing timeout\n    if (measurementTimeoutRef.current) {\n      clearTimeout(measurementTimeoutRef.current);\n    }\n\n    measurementTimeoutRef.current = setTimeout(() => {\n      if (!gridRef.current) {\n        return;\n      }\n\n      const gridRect = gridRef.current.getBoundingClientRect();\n      const positions = cardRefs.current.map((card) => {\n        if (!card) {\n          return null;\n        }\n\n        const rect = card.getBoundingClientRect();\n\n        return {\n          x: rect.left - gridRect.left,\n          y: rect.top - gridRect.top,\n        };\n      });\n\n      if (\n        positions.length !== TEAM_MEMBERS.length ||\n        positions.some((pos) => pos === null)\n      ) {\n        return;\n      }\n\n      const typedPositions = positions as { x: number; y: number }[];\n\n      setCardPositions((previous) => {\n        const changed =\n          previous.length !== typedPositions.length ||\n          previous.some((prevPos, index) => {\n            const nextPos = typedPositions[index];\n            return (\n              Math.abs(prevPos.x - nextPos.x) > 1 ||\n              Math.abs(prevPos.y - nextPos.y) > 1\n            );\n          });\n\n        return changed ? typedPositions : previous;\n      });\n\n      const firstCard = cardRefs.current[0];\n\n      if (firstCard) {\n        setFrameSize((previous) => {\n          const nextWidth = firstCard.offsetWidth;\n          const nextHeight = firstCard.offsetHeight;\n\n          if (previous.width !== nextWidth || previous.height !== nextHeight) {\n            return { width: nextWidth, height: nextHeight };\n          }\n\n          return previous;\n        });\n\n        setFrameRadius((previous) => {\n          const computedStyle = window.getComputedStyle(firstCard);\n          const rawRadius = computedStyle.borderTopLeftRadius || \"0\";\n          const nextRadius = Number.parseFloat(rawRadius) || 0;\n\n          return previous !== nextRadius ? nextRadius : previous;\n        });\n      }\n    }, MEASUREMENT_DEBOUNCE_MS);\n  }, []);\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    // Initial measurement\n    debouncedUpdateMeasurements();\n    window.addEventListener(\"resize\", debouncedUpdateMeasurements);\n\n    return () => {\n      window.removeEventListener(\"resize\", debouncedUpdateMeasurements);\n      // Clean up timeout on unmount\n      if (measurementTimeoutRef.current) {\n        clearTimeout(measurementTimeoutRef.current);\n      }\n    };\n  }, [debouncedUpdateMeasurements]);\n\n  // Animation lifecycle management - allow initial measurements\n  useEffect(() => {\n    // Start with animation flag false to allow initial measurements\n    isAnimatingRef.current = false;\n\n    // After initial measurements, we can start preventing updates during animation\n    const initTimer = setTimeout(() => {\n      // This will be managed by the animation cycle itself\n    }, 100);\n\n    return () => {\n      clearTimeout(initTimer);\n      isAnimatingRef.current = false;\n    };\n  }, []);\n\n  // Stable border positions - use available positions or fallback to zero\n  const borderPositions = useMemo(() => {\n    if (cardPositions.length === TEAM_MEMBERS.length) {\n      return FRAME_SEQUENCE.map(\n        (positionIndex) => cardPositions[positionIndex] || { x: 0, y: 0 }\n      );\n    }\n\n    return FRAME_SEQUENCE.map(() => ({ x: 0, y: 0 }));\n  }, [cardPositions]);\n\n  // Memoize keyframes to prevent recalculation during animation\n  const animationKeyframes = useMemo(() => {\n    const xKeyframes = borderPositions.map((position) => position.x);\n    const yKeyframes = borderPositions.map((position) => position.y);\n\n    return { x: xKeyframes, y: yKeyframes };\n  }, [borderPositions]);\n\n  const hasFrameSize = frameSize.width > 0 && frameSize.height > 0;\n\n  const cornerLength = useMemo(() => {\n    if (!hasFrameSize) {\n      return 16;\n    }\n\n    const shortestSide = Math.min(frameSize.width, frameSize.height);\n    const desired = shortestSide * 0.15;\n\n    return Math.max(Math.min(desired, shortestSide / 1.8), frameRadius + 8);\n  }, [frameSize.height, frameSize.width, frameRadius, hasFrameSize]);\n\n  // Optimized image load handler\n  const handleImageLoad = useCallback(() => {\n    debouncedUpdateMeasurements();\n  }, [debouncedUpdateMeasurements]);\n\n  // Initialize refs array length\n  if (cardRefs.current.length !== TEAM_MEMBERS.length) {\n    cardRefs.current.length = TEAM_MEMBERS.length;\n  }\n\n  return (\n    <div\n      className={cn(\"flex flex-col items-center px-6 md:px-8 gap-7\", className)}\n    >\n      {/* Title and Subtitle */}\n      <div className=\"text-center flex flex-col items-center max-w-3xl\">\n        <span className=\"text-4xl  font-bold text-fd-foreground\">\n          Leadership Spotlight\n        </span>\n        <span className=\"text-lg mt-3 text-fd-muted-foreground\">\n          Meet the minds shaping our product vision and guiding every launch.\n        </span>\n      </div>\n\n      {/* 2x2 Grid Container */}\n      <div className=\"relative w-full max-w-md\">\n        <div ref={gridRef} className=\"grid grid-cols-2 gap-6 relative\">\n          {TEAM_MEMBERS.map((member, index) => (\n            <motion.div\n              key={index}\n              className=\"relative aspect-[3/4] rounded-2xl overflow-hidden bg-black\"\n              style={{ willChange: \"auto\", lineHeight: 0 }}\n              ref={(node) => {\n                cardRefs.current[index] = node;\n              }}\n            >\n              {/* Image */}\n              <motion.img\n                src={member.image}\n                alt={member.name}\n                className=\"absolute inset-0 h-full w-full object-cover block\"\n                style={{ margin: 0, willChange: \"transform, filter\" }}\n                animate={getImageAnimation(index)}\n                transition={{\n                  duration: TOTAL_DURATION,\n                  times: CARD_KEYFRAME_TIMES,\n                  ease: SMOOTH_EASE,\n                  repeat: Infinity,\n                  repeatType: \"loop\",\n                }}\n                onLoad={handleImageLoad}\n              />\n\n              {/* Active tag */}\n              <motion.div\n                className=\"absolute flex flex-col gap-1 text-center inset-x-3 bottom-3 rounded-xl bg-black/75 px-3 py-2 text-white shadow-[0_8px_24px_rgba(15,23,42,0.35)] backdrop-blur\"\n                style={{ pointerEvents: \"none\" }}\n                animate={getTagAnimation(index)}\n                transition={{\n                  duration: TOTAL_DURATION,\n                  times: CARD_KEYFRAME_TIMES,\n                  ease: SMOOTH_EASE,\n                  repeat: Infinity,\n                  repeatType: \"loop\",\n                }}\n              >\n                <span className=\"text-[12px] md:text-sm font-semibold leading-tight\">\n                  {member.name}\n                </span>\n                <span className=\"text-[8px] md:text-[12px] font-medium text-white/70 leading-tight\">\n                  {member.role}\n                </span>\n              </motion.div>\n            </motion.div>\n          ))}\n\n          {/* Single Moving Scanning Border */}\n          <motion.div\n            className=\"absolute pointer-events-none\"\n            style={{\n              width: hasFrameSize ? frameSize.width : \"calc(50% - 12px)\",\n              height: hasFrameSize ? frameSize.height : undefined,\n              aspectRatio: hasFrameSize ? undefined : \"3/4\",\n              borderRadius: frameRadius || undefined,\n              top: 0,\n              left: 0,\n              willChange: \"transform\",\n            }}\n            animate={{\n              x: animationKeyframes.x,\n              y: animationKeyframes.y,\n            }}\n            transition={{\n              duration: TOTAL_DURATION,\n              times: FRAME_KEYFRAME_TIMES,\n              ease: SMOOTH_EASE,\n              repeat: Infinity,\n              repeatType: \"loop\",\n            }}\n          >\n            <div\n              className=\"absolute inset-0\"\n              style={{ borderRadius: frameRadius || undefined }}\n            >\n              {/* Top-left corner */}\n              <div\n                className=\"absolute border-[3px] border-blue-500 border-r-0 border-b-0\"\n                style={{\n                  width: cornerLength,\n                  height: cornerLength,\n                  top: 0,\n                  left: 0,\n                  borderTopLeftRadius: frameRadius || undefined,\n                }}\n              />\n\n              {/* Top-right corner */}\n              <div\n                className=\"absolute border-[3px] border-blue-500 border-l-0 border-b-0\"\n                style={{\n                  width: cornerLength,\n                  height: cornerLength,\n                  top: 0,\n                  right: 0,\n                  borderTopRightRadius: frameRadius || undefined,\n                }}\n              />\n\n              {/* Bottom-left corner */}\n              <div\n                className=\"absolute border-[3px] border-blue-500 border-r-0 border-t-0\"\n                style={{\n                  width: cornerLength,\n                  height: cornerLength,\n                  bottom: 0,\n                  left: 0,\n                  borderBottomLeftRadius: frameRadius || undefined,\n                }}\n              />\n\n              {/* Bottom-right corner */}\n              <div\n                className=\"absolute border-[3px] border-blue-500 border-l-0 border-t-0\"\n                style={{\n                  width: cornerLength,\n                  height: cornerLength,\n                  bottom: 0,\n                  right: 0,\n                  borderBottomRightRadius: frameRadius || undefined,\n                }}\n              />\n            </div>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nTeamCard.displayName = \"TeamCard\";\n\nexport default TeamCard;",
      "type": "registry:ui",
      "target": "components/ui/team-card.tsx"
    }
  ]
}
