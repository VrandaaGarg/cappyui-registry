{
  "name": "resume-builder",
  "type": "registry:ui",
  "title": "AI Resume Builder",
  "description": "A modern AI resume upload experience with animated processing steps, local persistence, and premium UI polish featuring sequential step animations and success notifications.",
  "dependencies": ["framer-motion", "tailwind-merge", "clsx", "lucide-react"],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/AIapplicationsComponents/resume-builder.tsx",
      "content": "\"use client\";\n\nimport {\n  ChangeEvent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { CheckCircle2, FileText, Loader2, UploadCloud } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst LOCAL_STORAGE_KEY = \"resume-builder-demo\";\nconst STEP_DELAY = 1100;\n\ntype StepStatus = \"pending\" | \"active\" | \"complete\";\ntype ViewState = \"idle\" | \"processing\";\n\ninterface ResumeBuilderProps {\n  className?: string;\n}\n\ninterface StoredResume {\n  name: string;\n  size: number;\n  type: string;\n  uploadedAt: string;\n}\n\nconst PROCESSING_STEPS = [\n  \"Parsing data from resume\",\n  \"Collecting and analysing experience\",\n  \"Extracting skills and keywords\",\n  \"Preparing tailored resume output\",\n];\n\nconst formatFileSize = (bytes: number) => {\n  if (!bytes) return \"0 Bytes\";\n  const units = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n  const exponent = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / Math.pow(1024, exponent)).toFixed(1)} ${units[exponent]}`;\n};\n\nconst ResumeBuilder = ({ className }: ResumeBuilderProps) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const timersRef = useRef<number[]>([]);\n\n  const [viewState, setViewState] = useState<ViewState>(\"idle\");\n  const [stepStatuses, setStepStatuses] = useState<StepStatus[]>(\n    PROCESSING_STEPS.map(() => \"pending\")\n  );\n  const [currentFile, setCurrentFile] = useState<StoredResume | null>(null);\n  const [storedResume, setStoredResume] = useState<StoredResume | null>(null);\n  const [justCompleted, setJustCompleted] = useState(false);\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    try {\n      const saved = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n      if (saved) {\n        const parsed: StoredResume = JSON.parse(saved);\n        setStoredResume(parsed);\n      }\n    } catch (error) {\n      console.error(\"Unable to read stored resume\", error);\n    }\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      timersRef.current.forEach((id) => window.clearTimeout(id));\n      timersRef.current = [];\n    };\n  }, []);\n\n  const resetFlow = useCallback(() => {\n    timersRef.current.forEach((id) => window.clearTimeout(id));\n    timersRef.current = [];\n    setStepStatuses(PROCESSING_STEPS.map(() => \"pending\"));\n    setCurrentFile(null);\n    setJustCompleted(false);\n  }, []);\n\n  const persistFile = useCallback(async (file: File) => {\n    const payload: StoredResume = {\n      name: file.name,\n      size: file.size,\n      type: file.type || \"application/octet-stream\",\n      uploadedAt: new Date().toISOString(),\n    };\n\n    if (typeof window !== \"undefined\") {\n      window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(payload));\n    }\n\n    setStoredResume(payload);\n  }, []);\n\n  const beginProcessing = useCallback(\n    (file: File) => {\n      resetFlow();\n\n      const metadata: StoredResume = {\n        name: file.name,\n        size: file.size,\n        type: file.type || \"application/octet-stream\",\n        uploadedAt: new Date().toISOString(),\n      };\n\n      setCurrentFile(metadata);\n      setViewState(\"processing\");\n      setStepStatuses(\n        PROCESSING_STEPS.map((_, index) => (index === 0 ? \"active\" : \"pending\"))\n      );\n\n      PROCESSING_STEPS.forEach((_, index) => {\n        const timer = window.setTimeout(() => {\n          setStepStatuses((prev) =>\n            prev.map((status, idx) => {\n              if (idx < index) return \"complete\";\n              if (idx === index) return \"active\";\n              return \"pending\";\n            })\n          );\n        }, index * STEP_DELAY);\n        timersRef.current.push(timer);\n      });\n\n      const completionTimer = window.setTimeout(async () => {\n        setStepStatuses(PROCESSING_STEPS.map(() => \"complete\"));\n        await persistFile(file);\n        setStepStatuses(PROCESSING_STEPS.map(() => \"pending\"));\n        setCurrentFile(null);\n        setViewState(\"idle\");\n        setJustCompleted(true);\n\n        const successTimer = window.setTimeout(() => {\n          setJustCompleted(false);\n        }, 2200);\n        timersRef.current.push(successTimer);\n      }, PROCESSING_STEPS.length * STEP_DELAY + 500);\n\n      timersRef.current.push(completionTimer);\n    },\n    [persistFile, resetFlow]\n  );\n\n  const handleFileSelect = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const file = event.target.files?.[0];\n      if (!file) return;\n      beginProcessing(file);\n      event.target.value = \"\";\n    },\n    [beginProcessing]\n  );\n\n  const triggerFilePicker = useCallback(() => {\n    if (viewState === \"processing\") return;\n    fileInputRef.current?.click();\n  }, [viewState]);\n\n  const lastUploadLabel = useMemo(() => {\n    if (!storedResume) return null;\n    return `${storedResume.name} Â· ${formatFileSize(storedResume.size)}`;\n  }, [storedResume]);\n\n  return (\n    <div\n      className={cn(\n        \"relative max-w-xl mx-auto flex min-h-[24rem] items-center justify-center overflow-hidden rounded-lg border border-neutral-200/60 bg-neutral-50/70 p-3 md:p-8 shadow-xl backdrop-blur dark:border-neutral-800/70 dark:bg-neutral-900/50\",\n        className\n      )}\n    >\n      <AnimatePresence>\n        {justCompleted && (\n          <motion.div\n            key=\"resume-toast\"\n            className=\"absolute top-4 left-1/2 z-30 flex -translate-x-1/2 items-center gap-2 rounded-full min-w-[280px] bg-neutral-900 px-3 md:px-4 py-2 text-sm font-medium text-white shadow-lg shadow-neutral-900/20 dark:bg-white dark:text-neutral-900\"\n            initial={{ opacity: 0, y: -12 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -12 }}\n            transition={{ duration: 0.3, ease: \"easeOut\" }}\n          >\n            <CheckCircle2 className=\"h-4 w-4 text-emerald-400\" />\n            Resume processed successfully\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <motion.div\n        aria-hidden\n        className=\"pointer-events-none absolute -top-36 left-1/2 h-80 w-80 -translate-x-1/2 rounded-full bg-gradient-to-br from-violet-400/30 via-sky-300/20 to-transparent blur-3xl dark:from-blue-500/20 dark:via-violet-600/10\"\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 1.1, ease: \"easeOut\" }}\n      />\n\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\".pdf,.doc,.docx,.txt,.rtf\"\n        className=\"hidden\"\n        onChange={handleFileSelect}\n      />\n\n      <AnimatePresence mode=\"wait\">\n        {viewState === \"idle\" && (\n          <motion.div\n            key=\"idle\"\n            className=\"relative flex w-full max-w-md flex-col items-center gap-3 rounded-xl border-2 border-dashed border-neutral-300/80 bg-white/80 p-10 text-center shadow-sm dark:border-neutral-700/60 dark:bg-neutral-950/60\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            transition={{ duration: 0.4, ease: \"easeOut\" }}\n          >\n            <div className=\"flex h-16 w-16 items-center justify-center rounded-lg bg-neutral-900 text-white dark:bg-white dark:text-neutral-900\">\n              <UploadCloud className=\"h-7 w-7\" />\n            </div>\n            <div className=\"flex flex-col gap-2\">\n              <span className=\"text-xl font-semibold text-neutral-900 dark:text-white\">\n                Upload resume\n              </span>\n              <span className=\"mx-auto max-w-xs text-xs text-neutral-500 dark:text-neutral-400\">\n                Choose a PDF or DOCX to preview the AI resume building journey.\n              </span>\n            </div>\n            <motion.button\n              type=\"button\"\n              onClick={triggerFilePicker}\n              className=\"inline-flex items-center justify-center rounded-lg bg-neutral-900 px-6 py-2.5 text-sm font-medium text-white transition hover:-translate-y-0.5 hover:bg-neutral-800 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-900/30 dark:bg-white dark:text-neutral-900 dark:hover:bg-neutral-200\"\n              whileTap={{ scale: 0.97 }}\n            >\n              Select file\n            </motion.button>\n            <AnimatePresence></AnimatePresence>\n          </motion.div>\n        )}\n\n        {viewState === \"processing\" && (\n          <motion.div\n            key=\"processing\"\n            className=\"w-full max-w-md rounded-lg border border-neutral-200/70 bg-white/90 p-4 md:p-8 shadow-xl dark:border-neutral-800/60 dark:bg-neutral-950/90\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            transition={{ duration: 0.35, ease: \"easeOut\" }}\n          >\n            <div className=\"flex items-center justify-between gap-4 rounded-lg border border-neutral-200/80 bg-neutral-100/70 px-3 py-4 dark:border-neutral-800/70 dark:bg-neutral-900/60\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-neutral-900 text-white dark:bg-white dark:text-neutral-900\">\n                  <FileText className=\"h-5 w-5\" />\n                </div>\n                <div className=\"flex flex-col\">\n                  <span className=\"text-xs font-medium text-neutral-500 dark:text-neutral-400\">\n                    Processing resume\n                  </span>\n                  <span className=\"text-[14px] font-semibold text-neutral-900 dark:text-white\">\n                    {currentFile?.name ?? \"resume.pdf\"}\n                  </span>\n                </div>\n              </div>\n              <Loader2 className=\"h-5 w-5 animate-spin text-neutral-400\" />\n            </div>\n\n            <div className=\"mt-5 space-y-2.5\">\n              {PROCESSING_STEPS.map((label, index) => {\n                const state = stepStatuses[index];\n                return (\n                  <motion.div\n                    key={label}\n                    className=\"flex items-center gap-3 rounded-lg border border-neutral-200/70 bg-white/80 px-2 py-0.5 dark:border-neutral-800/70 dark:bg-neutral-900/70\"\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.05 }}\n                  >\n                    <div className=\"flex h-10 w-10 items-center justify-center rounded-lg border border-neutral-200/70 bg-neutral-100/60 dark:border-neutral-800/70 dark:bg-neutral-900/60\">\n                      <FileText className=\"h-4 w-4 text-neutral-400\" />\n                    </div>\n                    <p className=\"flex-1 text-sm font-medium text-neutral-600 dark:text-neutral-300\">\n                      {label}\n                    </p>\n                    <div className=\"flex h-6 w-6 items-center justify-center\">\n                      {state === \"complete\" ? (\n                        <CheckCircle2 className=\"h-5 w-5 text-emerald-500\" />\n                      ) : state === \"active\" ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin text-neutral-400\" />\n                      ) : (\n                        <span className=\"h-1.5 w-1.5 rounded-full bg-neutral-300 dark:bg-neutral-700\" />\n                      )}\n                    </div>\n                  </motion.div>\n                );\n              })}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default ResumeBuilder;\n",
      "type": "registry:ui",
      "target": "components/AIapplicationsComponents/resume-builder.tsx"
    }
  ]
}
