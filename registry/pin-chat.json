{
  "name": "pin-chat",
  "type": "registry:ui",
  "title": "Pin Chat",
  "description": "An interactive chat list component with smooth pin/unpin animations, featuring realistic movement between sections and localStorage persistence.",
  "dependencies": ["framer-motion", "lucide-react", "tailwind-merge", "clsx"],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ui/pin-chat.tsx",
      "content": "\"use client\";\n\nimport React, { memo, useCallback, useEffect, useState, useMemo } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Pin, MessageSquare } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Chat {\n  id: string;\n  title: string;\n  lastMessage: string;\n  timestamp: string;\n}\n\ninterface ListItem {\n  id: string;\n  type: \"heading\" | \"chat\";\n  data?: Chat;\n  title?: string;\n  count?: number;\n}\n\n// Sample chat data\nconst SAMPLE_CHATS: Chat[] = [\n  {\n    id: \"1\",\n    title: \"Architecture of Cloud\",\n    lastMessage: \"AWS vs Azure vs GCP\",\n    timestamp: \"2 min ago\",\n  },\n  {\n    id: \"2\",\n    title: \"React Best Practices\",\n    lastMessage: \"Optimizing component rendering\",\n    timestamp: \"5 min ago\",\n  },\n  {\n    id: \"3\",\n    title: \"Database Design\",\n    lastMessage: \"Normalization vs denormalization trade-offs\",\n    timestamp: \"1 hour ago\",\n  },\n  {\n    id: \"4\",\n    title: \"API Development\",\n    lastMessage: \"RESTful API design principles\",\n    timestamp: \"2 hours ago\",\n  },\n  {\n    id: \"5\",\n    title: \"DevOps Pipeline\",\n    lastMessage: \"CI/CD best practices and automation\",\n    timestamp: \"1 day ago\",\n  },\n  {\n    id: \"6\",\n    title: \"Machine Learning\",\n    lastMessage: \"Introduction to neural networks\",\n    timestamp: \"2 days ago\",\n  },\n];\n\nconst DEFAULT_PINNED_CHATS = [\"1\", \"2\"];\nconst STORAGE_KEY = \"pin-chat-pinned-ids\";\n\ninterface ChatItemProps {\n  chat: Chat;\n  isPinned: boolean;\n  onTogglePin: (chatId: string) => void;\n}\n\ninterface HeadingItemProps {\n  title: string;\n  count: number;\n  icon: React.ReactNode;\n}\n\n// Heading component with smooth layout animation\nconst HeadingItem = memo(({ title, count, icon }: HeadingItemProps) => {\n  return (\n    <motion.div\n      layout\n      layoutId={`heading-${title}`}\n      initial={{ opacity: 0, y: -10 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -10 }}\n      transition={{\n        layout: {\n          type: \"spring\",\n          stiffness: 400,\n          damping: 30,\n          mass: 0.8,\n        },\n        opacity: { duration: 0.2 },\n      }}\n      className=\"flex items-center gap-2 relative z-10 py-1\"\n    >\n      {icon}\n      <span className=\"text-md text-neutral-800 dark:text-neutral-100\">\n        {title} ({count})\n      </span>\n    </motion.div>\n  );\n});\n\nHeadingItem.displayName = \"HeadingItem\";\n\n// Chat component with realistic movement animation\nconst ChatItem = memo(\n  ({ chat, isPinned, onTogglePin }: ChatItemProps) => {\n    const handleTogglePin = useCallback(\n      (e: React.MouseEvent) => {\n        e.stopPropagation();\n        onTogglePin(chat.id);\n      },\n      [chat.id, onTogglePin]\n    );\n\n    return (\n      <motion.div\n        layoutId={chat.id}\n        layout=\"position\"\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{\n          opacity: 1,\n          scale: 1,\n          transition: {\n            opacity: { duration: 0.25 },\n            scale: { type: \"spring\", stiffness: 300, damping: 25 },\n          },\n        }}\n        exit={{\n          opacity: 0,\n          scale: 0.9,\n          transition: { duration: 0.2 },\n        }}\n        transition={{\n          layout: {\n            type: \"spring\",\n            stiffness: 350,\n            damping: 30,\n            mass: 1,\n          },\n        }}\n        className={cn(\n          \"group relative flex items-center justify-between rounded-lg border p-2 transition-shadow duration-200 cursor-pointer overflow-hidden\",\n          \"hover:shadow-md hover:shadow-black/10 dark:hover:shadow-white/5\",\n          \"shadow-sm shadow-black/5 dark:shadow-white/5\",\n          \"border-neutral-300 dark:border-neutral-600/50 bg-gradient-to-b from-white via-neutral-50 to-neutral-100 dark:from-neutral-950/30 dark:via-neutral-900/30 dark:to-neutral-800/30\"\n        )}\n        onClick={handleTogglePin}\n      >\n        <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n          <motion.div layout className=\"flex-shrink-0\">\n            <div\n              className={cn(\n                \"flex h-10 w-10 items-center justify-center rounded-sm border border-neutral-500/50 transition-all duration-200 shadow-sm bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-300 shadow-neutral-200 dark:shadow-neutral-800\"\n              )}\n            >\n              <MessageSquare className=\"h-5 w-5\" />\n            </div>\n          </motion.div>\n\n          <motion.div\n            layout\n            className=\"flex-1 min-w-0 flex justify-between gap-2\"\n          >\n            <span className=\"text-sm text-neutral-600 dark:text-neutral-300 truncate\">\n              {chat.lastMessage}\n            </span>\n            <span className=\"text-xs text-neutral-500 dark:text-neutral-400 whitespace-nowrap\">\n              {chat.timestamp}\n            </span>\n          </motion.div>\n        </div>\n\n        <AnimatePresence mode=\"wait\">\n          {isPinned && (\n            <motion.div\n              layout\n              className=\"flex-shrink-0 ml-1.5 md:ml-3\"\n              initial={{ opacity: 0, scale: 0, rotate: 0 }}\n              animate={{\n                opacity: 1,\n                scale: 1,\n                rotate: 45,\n                transition: {\n                  type: \"spring\",\n                  stiffness: 500,\n                  damping: 25,\n                  delay: 0.15,\n                },\n              }}\n              exit={{\n                opacity: 0,\n                scale: 0,\n                rotate: 0,\n                transition: { duration: 0.15 },\n              }}\n            >\n              <motion.div\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.95 }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 20 }}\n                className={cn(\n                  \"flex h-8 w-8 items-center justify-center rounded-full border border-neutral-500/50 transition-all duration-200\",\n                  \"shadow-sm hover:shadow-md\",\n                  \"bg-gradient-to-b from-neutral-100 to-neutral-200 dark:from-neutral-800 dark:to-neutral-700 text-neutral-600 dark:text-neutral-300 hover:from-neutral-200 hover:to-neutral-300 dark:hover:from-neutral-700 dark:hover:to-neutral-600 shadow-neutral-200 dark:shadow-neutral-800\"\n                )}\n              >\n                <Pin className=\"h-4 w-4\" />\n              </motion.div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    );\n  },\n  (prevProps, nextProps) => {\n    return (\n      prevProps.chat.id === nextProps.chat.id &&\n      prevProps.isPinned === nextProps.isPinned\n    );\n  }\n);\n\nChatItem.displayName = \"ChatItem\";\n\nconst PinChat = memo(function PinChat() {\n  const [pinnedChatIds, setPinnedChatIds] =\n    useState<string[]>(DEFAULT_PINNED_CHATS);\n  const [isHydrated, setIsHydrated] = useState(false);\n\n  // Load from localStorage after hydration\n  useEffect(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        setPinnedChatIds(JSON.parse(stored));\n      }\n    } catch (error) {\n      console.warn(\"Failed to load pinned chats from localStorage:\", error);\n    }\n    setIsHydrated(true);\n  }, []);\n\n  // Persist pinned chats to localStorage\n  useEffect(() => {\n    if (!isHydrated) return;\n\n    const timeoutId = setTimeout(() => {\n      try {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(pinnedChatIds));\n      } catch (error) {\n        console.warn(\"Failed to save pinned chats to localStorage:\", error);\n      }\n    }, 100);\n\n    return () => clearTimeout(timeoutId);\n  }, [pinnedChatIds, isHydrated]);\n\n  const handleTogglePin = useCallback((chatId: string) => {\n    setPinnedChatIds((prev) => {\n      if (prev.includes(chatId)) {\n        return prev.filter((id) => id !== chatId);\n      } else {\n        return [...prev, chatId];\n      }\n    });\n  }, []);\n\n  // Create unified list with headings and chats\n  const unifiedList = useMemo(() => {\n    const pinnedChats = SAMPLE_CHATS.filter((chat) =>\n      pinnedChatIds.includes(chat.id)\n    );\n    const unpinnedChats = SAMPLE_CHATS.filter(\n      (chat) => !pinnedChatIds.includes(chat.id)\n    );\n\n    const items: ListItem[] = [];\n\n    // Add pinned section if there are pinned chats\n    if (pinnedChats.length > 0) {\n      items.push({\n        id: \"pinned-heading\",\n        type: \"heading\",\n        title: \"Pinned Chats\",\n        count: pinnedChats.length,\n      });\n\n      pinnedChats.forEach((chat) => {\n        items.push({\n          id: chat.id,\n          type: \"chat\",\n          data: chat,\n        });\n      });\n    }\n\n    // Add regular chats section\n    items.push({\n      id: \"regular-heading\",\n      type: \"heading\",\n      title: pinnedChats.length > 0 ? \"Other Chats\" : \"All Chats\",\n      count: unpinnedChats.length,\n    });\n\n    unpinnedChats.forEach((chat) => {\n      items.push({\n        id: chat.id,\n        type: \"chat\",\n        data: chat,\n      });\n    });\n\n    return items;\n  }, [pinnedChatIds]);\n\n  // Show loading state during hydration\n  if (!isHydrated) {\n    return (\n      <div className=\"flex max-w-lg mx-auto w-full flex-col rounded-3xl border border-neutral-300 dark:border-neutral-600\">\n        <div className=\"p-6 border-b border-neutral-200 dark:border-neutral-700\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex gap-3 items-center justify-center rounded-full bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-200 px-3 py-2\">\n              <Pin className=\"h-5 w-5\" />\n              <span className=\"text-sm font-semibold\">Pin Chat</span>\n            </div>\n\n            <div className=\"ml-auto flex items-center gap-2 text-xs text-neutral-500 dark:text-neutral-400\">\n              <span className=\"h-2 w-2 animate-pulse rounded-full bg-emerald-500\" />\n              Interactive Demo\n            </div>\n          </div>\n        </div>\n        <div className=\"flex-1 flex items-center justify-center p-8\">\n          <div className=\"animate-pulse text-neutral-500 dark:text-neutral-400\">\n            Loading...\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex max-w-lg mx-auto w-full flex-col rounded-xl\">\n      <div className=\"flex-1 overflow-hidden relative\">\n        <div className=\"h-full overflow-y-auto no-scrollbar p-4 space-y-3 relative\">\n          <AnimatePresence initial={false} mode=\"popLayout\">\n            {unifiedList.map((item) => {\n              if (item.type === \"heading\") {\n                const icon = item.title?.includes(\"Pinned\") ? (\n                  <Pin className=\"h-4 w-4 text-neutral-600 dark:text-neutral-300\" />\n                ) : (\n                  <MessageSquare className=\"h-4 w-4 text-neutral-600 dark:text-neutral-300\" />\n                );\n\n                return (\n                  <HeadingItem\n                    key={item.id}\n                    title={item.title!}\n                    count={item.count!}\n                    icon={icon}\n                  />\n                );\n              } else {\n                const isPinned = pinnedChatIds.includes(item.id);\n\n                return (\n                  <ChatItem\n                    key={item.id}\n                    chat={item.data!}\n                    isPinned={isPinned}\n                    onTogglePin={handleTogglePin}\n                  />\n                );\n              }\n            })}\n          </AnimatePresence>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nPinChat.displayName = \"PinChat\";\n\nexport default PinChat;\n",
      "type": "registry:ui",
      "target": "components/ui/pin-chat.tsx"
    }
  ]
}
