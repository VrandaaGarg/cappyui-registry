{
  "name": "calendar-range",
  "type": "registry:ui",
  "title": "Calendar with Date Range",
  "description": "A beautiful calendar component that highlights a range of dates with smart styling. First and last dates are fully highlighted, middle dates have subtle background, and current date shows a checkmark icon.",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "tailwind-merge",
    "clsx"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ui/calendar-range.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { ChevronLeft, ChevronRight, Check } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst DAYS = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\nconst MONTHS = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\ninterface CalendarRangeProps {\n  className?: string;\n  daysBeforeCurrent?: number;\n  daysAfterCurrent?: number;\n}\n\ninterface DayCell {\n  day: number;\n  month: number;\n  year: number;\n  isCurrentMonth: boolean;\n}\n\nexport const CalendarRange = ({\n  className,\n  daysBeforeCurrent = 2,\n  daysAfterCurrent = 2,\n}: CalendarRangeProps) => {\n  const today = new Date();\n  const [currentMonth, setCurrentMonth] = useState(today.getMonth());\n  const [currentYear, setCurrentYear] = useState(today.getFullYear());\n\n  // Calculate range dates\n  const rangeStart = new Date(today);\n  rangeStart.setDate(today.getDate() - daysBeforeCurrent);\n\n  const rangeEnd = new Date(today);\n  rangeEnd.setDate(today.getDate() + daysAfterCurrent);\n\n  const getDaysInMonth = (month: number, year: number) => {\n    return new Date(year, month + 1, 0).getDate();\n  };\n\n  const getFirstDayOfMonth = (month: number, year: number) => {\n    return new Date(year, month, 1).getDay();\n  };\n\n  const isDateInRange = (day: number, month: number, year: number) => {\n    const date = new Date(year, month, day);\n    date.setHours(0, 0, 0, 0);\n\n    const start = new Date(rangeStart);\n    start.setHours(0, 0, 0, 0);\n\n    const end = new Date(rangeEnd);\n    end.setHours(0, 0, 0, 0);\n\n    return date >= start && date <= end;\n  };\n\n  const isToday = (day: number, month: number, year: number) => {\n    return (\n      day === today.getDate() &&\n      month === today.getMonth() &&\n      year === today.getFullYear()\n    );\n  };\n\n  const isRangeStart = (day: number, month: number, year: number) => {\n    const date = new Date(year, month, day);\n    date.setHours(0, 0, 0, 0);\n    const start = new Date(rangeStart);\n    start.setHours(0, 0, 0, 0);\n    return date.getTime() === start.getTime();\n  };\n\n  const isRangeEnd = (day: number, month: number, year: number) => {\n    const date = new Date(year, month, day);\n    date.setHours(0, 0, 0, 0);\n    const end = new Date(rangeEnd);\n    end.setHours(0, 0, 0, 0);\n    return date.getTime() === end.getTime();\n  };\n\n  const handlePrevMonth = () => {\n    if (currentMonth === 0) {\n      setCurrentMonth(11);\n      setCurrentYear(currentYear - 1);\n    } else {\n      setCurrentMonth(currentMonth - 1);\n    }\n  };\n\n  const handleNextMonth = () => {\n    if (currentMonth === 11) {\n      setCurrentMonth(0);\n      setCurrentYear(currentYear + 1);\n    } else {\n      setCurrentMonth(currentMonth + 1);\n    }\n  };\n\n  const daysInMonth = getDaysInMonth(currentMonth, currentYear);\n  const firstDay = getFirstDayOfMonth(currentMonth, currentYear);\n\n  // Get previous month info\n  const prevMonth = currentMonth === 0 ? 11 : currentMonth - 1;\n  const prevMonthYear = currentMonth === 0 ? currentYear - 1 : currentYear;\n  const daysInPrevMonth = getDaysInMonth(prevMonth, prevMonthYear);\n\n  // Get next month info\n  const nextMonth = currentMonth === 11 ? 0 : currentMonth + 1;\n  const nextMonthYear = currentMonth === 11 ? currentYear + 1 : currentYear;\n\n  const days: DayCell[] = [];\n\n  // Days from previous month\n  for (let i = firstDay - 1; i >= 0; i--) {\n    days.push({\n      day: daysInPrevMonth - i,\n      month: prevMonth,\n      year: prevMonthYear,\n      isCurrentMonth: false,\n    });\n  }\n\n  // Days of current month\n  for (let i = 1; i <= daysInMonth; i++) {\n    days.push({\n      day: i,\n      month: currentMonth,\n      year: currentYear,\n      isCurrentMonth: true,\n    });\n  }\n\n  // Days from next month to fill the grid\n  const remainingCells = 42 - days.length; // 6 rows * 7 days\n  for (let i = 1; i <= remainingCells; i++) {\n    days.push({\n      day: i,\n      month: nextMonth,\n      year: nextMonthYear,\n      isCurrentMonth: false,\n    });\n  }\n\n  return (\n    <div\n      className={cn(\n        \"mx-auto w-full max-w-md rounded-3xl border border-fd-border bg-fd-background p-8 shadow-lg\",\n        className\n      )}\n    >\n      {/* Header with navigation */}\n      <div className=\"mb-8 flex items-center justify-between\">\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handlePrevMonth}\n          className=\"flex h-10 w-10 items-center justify-center rounded-lg text-fd-muted-foreground transition-colors hover:bg-fd-accent hover:text-fd-foreground\"\n          aria-label=\"Previous month\"\n        >\n          <ChevronLeft className=\"h-6 w-6\" />\n        </motion.button>\n\n        <motion.span\n          key={`${currentMonth}-${currentYear}`}\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"text-xl font-bold tracking-wider text-fd-foreground\"\n        >\n          {MONTHS[currentMonth]} {currentYear}\n        </motion.span>\n\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleNextMonth}\n          className=\"flex h-10 w-10 items-center justify-center rounded-lg text-fd-muted-foreground transition-colors hover:bg-fd-accent hover:text-fd-foreground\"\n          aria-label=\"Next month\"\n        >\n          <ChevronRight className=\"h-6 w-6\" />\n        </motion.button>\n      </div>\n\n      {/* Day headers */}\n      <div className=\"mb-4 grid grid-cols-7 gap-2\">\n        {DAYS.map((day, index) => (\n          <div\n            key={index}\n            className=\"flex h-10 items-center justify-center text-sm font-medium text-fd-muted-foreground\"\n          >\n            {day}\n          </div>\n        ))}\n      </div>\n\n      {/* Calendar grid */}\n      <motion.div\n        key={`${currentMonth}-${currentYear}-grid`}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.3 }}\n        className=\"grid grid-cols-7 gap-2\"\n      >\n        {days.map((dayCell, index) => {\n          const inRange = isDateInRange(\n            dayCell.day,\n            dayCell.month,\n            dayCell.year\n          );\n          const isTodayDate = isToday(dayCell.day, dayCell.month, dayCell.year);\n          const isStart = isRangeStart(\n            dayCell.day,\n            dayCell.month,\n            dayCell.year\n          );\n          const isEnd = isRangeEnd(dayCell.day, dayCell.month, dayCell.year);\n          const isMiddle = inRange && !isStart && !isEnd && !isTodayDate;\n\n          return (\n            <motion.div\n              key={index}\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: index * 0.01, duration: 0.2 }}\n              className={cn(\n                \"relative flex h-12 items-center justify-center rounded-lg text-lg font-medium transition-all\",\n                !dayCell.isCurrentMonth && \"text-fd-muted-foreground/40\",\n                dayCell.isCurrentMonth &&\n                  !inRange &&\n                  \"text-fd-foreground hover:bg-fd-accent\",\n                isMiddle && \"bg-fd-accent/50 text-fd-foreground\",\n                (isStart || isEnd) &&\n                  \"bg-fd-primary/90 text-fd-primary-foreground shadow-md\",\n                isTodayDate &&\n                  \"bg-fd-accent/50 text-fd-primary-foreground shadow-md\"\n              )}\n            >\n              {dayCell.day}\n              {isTodayDate && (\n                <motion.div\n                  initial={{ scale: 0, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ delay: 0.3, duration: 0.3 }}\n                  className=\"absolute inset-0 flex items-center justify-center rounded-lg  \"\n                >\n                  <Check className=\"h-6 w-6 text-fd-foreground\" />\n                </motion.div>\n              )}\n            </motion.div>\n          );\n        })}\n      </motion.div>\n    </div>\n  );\n};\n\nexport default CalendarRange;\n",
      "type": "registry:ui",
      "target": "components/ui/calendar-range.tsx"
    }
  ]
}

