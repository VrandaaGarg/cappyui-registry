{
  "name": "spam-notifications",
  "type": "registry:ui",
  "title": "Spam Notifications",
  "description": "An animated notification stack component showcasing spam-like notifications with glassmorphism effects and smooth pop-in animations.",
  "dependencies": ["framer-motion", "lucide-react", "tailwind-merge", "clsx"],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ui/spam-notifications.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Bell,\n  Mail,\n  Star,\n  Gift,\n  Zap,\n  Trophy,\n  Shield,\n  Rocket,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface NotificationMessage {\n  id: string;\n  icon: React.ComponentType<{ className?: string }>;\n  title: string;\n  subtitle: string;\n  time: string;\n  color: string;\n}\n\nconst ALL_NOTIFICATION_MESSAGES: NotificationMessage[] = [\n  {\n    id: \"1\",\n    icon: Gift,\n    title: \"Amazon\",\n    time: \"6 min ago\",\n    subtitle:\n      \"Congratulations! You've won a $1,000 gift card.Offer ends in 2 days. So hurry up and claim it before it's too late!\",\n    color: \"bg-orange-500/90\",\n  },\n  {\n    id: \"2\",\n    icon: Mail,\n    time: \"10 min ago\",\n    title: \"Security Alert\",\n    subtitle:\n      \"Unusual activity detected. Verify your identity now to avoid account suspension. Offer ends in 2 days. So hurry up and claim it before it's too late!\",\n    color: \"bg-red-500/90\",\n  },\n  {\n    id: \"3\",\n    icon: Bell,\n    time: \"15 min ago\",\n    title: \"Dating App\",\n    subtitle:\n      \"You have 23 new matches.nearby Offer ends in 2 days. So hurry up and claim it before it's too late!\",\n    color: \"bg-pink-500/90\",\n  },\n  {\n    id: \"4\",\n    icon: Zap,\n    time: \"24 min ago\",\n    title: \"Flash Sale\",\n    subtitle:\n      \"90% off everything - ends in 5 minutes. you should claimed it before it's too late!\",\n    color: \"bg-yellow-500/90\",\n  },\n  {\n    id: \"5\",\n    icon: Shield,\n    time: \"2:48 PM\",\n    title: \"McAfee Security\",\n    subtitle:\n      \"3 viruses detected on your device.Go and remove them before it's too late!\",\n    color: \"bg-blue-500/90\",\n  },\n  {\n    id: \"6\",\n    icon: Trophy,\n    time: \"3:12 PM\",\n    title: \"Apple Store\",\n    subtitle:\n      \"You're our millionth visitor! Claim your iPhone. It is the best deal!\",\n    color: \"bg-purple-500/90\",\n  },\n  {\n    id: \"7\",\n    icon: Rocket,\n    time: \"3:15 PM\",\n    title: \"Investment Opportunity\",\n    subtitle:\n      \"Make $5,000/day working from home.Just click the link and start earning now!\",\n    color: \"bg-green-500/90\",\n  },\n  {\n    id: \"8\",\n    icon: Star,\n    time: \"3:17 PM\",\n    title: \"Exclusive Reward\",\n    subtitle:\n      \"Spin the wheel to unlock hidden bonuses.You can win a lifetime supply of apple products.\",\n    color: \"bg-amber-500/90\",\n  },\n];\n\nconst MAX_NOTIFICATIONS = 8;\nconst STAGGER_DELAY = 450;\nconst DISPLAY_DURATION = 4500;\nconst FADE_DURATION = 1200;\n\ninterface SpamNotificationsProps {\n  className?: string;\n}\n\nexport default function SpamNotifications({\n  className,\n}: SpamNotificationsProps) {\n  const [visibleNotifications, setVisibleNotifications] = useState<\n    NotificationMessage[]\n  >([]);\n  const [animationPhase, setAnimationPhase] = useState<\n    \"stacking\" | \"displaying\" | \"fading\"\n  >(\"stacking\");\n  const [animationCycle, setAnimationCycle] = useState(0);\n  const [isMounted, setIsMounted] = useState(false);\n  const isActiveRef = useRef(false);\n  const timeoutIdsRef = useRef<Set<ReturnType<typeof setTimeout>>>(new Set());\n\n  const messagesToDisplay = useMemo(\n    () => ALL_NOTIFICATION_MESSAGES.slice(0, MAX_NOTIFICATIONS),\n    []\n  );\n\n  const scheduleTimeout = useCallback((handler: () => void, delay: number) => {\n    const timeoutId = setTimeout(() => {\n      timeoutIdsRef.current.delete(timeoutId);\n      handler();\n    }, delay);\n\n    timeoutIdsRef.current.add(timeoutId);\n    return timeoutId;\n  }, []);\n\n  const clearAllTimeouts = useCallback(() => {\n    timeoutIdsRef.current.forEach((timeoutId) => {\n      clearTimeout(timeoutId);\n    });\n    timeoutIdsRef.current.clear();\n  }, []);\n\n  const startAnimation = useCallback(() => {\n    if (!isActiveRef.current) {\n      return;\n    }\n\n    clearAllTimeouts();\n    setVisibleNotifications([]);\n    setAnimationPhase(\"stacking\");\n\n    // Update cycle first, then add notifications after a small delay\n    setAnimationCycle((prev) => {\n      const newCycle = prev + 1;\n\n      // Add notifications one by one with staggered timing\n      messagesToDisplay.forEach((notification, index) => {\n        scheduleTimeout(() => {\n          if (!isActiveRef.current) {\n            return;\n          }\n          setVisibleNotifications((prev) => [...prev, notification]);\n        }, index * STAGGER_DELAY + 150); // Small delay to ensure cycle is updated\n      });\n\n      return newCycle;\n    });\n\n    const totalMessages = messagesToDisplay.length;\n    const stackingDuration = totalMessages * STAGGER_DELAY + 650;\n\n    // After all notifications are added, allow them to linger before fading out\n    scheduleTimeout(() => {\n      if (!isActiveRef.current) {\n        return;\n      }\n      setAnimationPhase(\"displaying\");\n      scheduleTimeout(() => {\n        if (!isActiveRef.current) {\n          return;\n        }\n        setAnimationPhase(\"fading\");\n        scheduleTimeout(() => {\n          if (!isActiveRef.current) {\n            return;\n          }\n          setVisibleNotifications([]); // Clear notifications first\n          scheduleTimeout(() => {\n            if (!isActiveRef.current) {\n              return;\n            }\n            startAnimation(); // Restart the cycle after clearing\n          }, 200);\n        }, FADE_DURATION);\n      }, DISPLAY_DURATION);\n    }, stackingDuration); // Updated to account for the delay offset\n  }, [clearAllTimeouts, messagesToDisplay, scheduleTimeout]);\n\n  useEffect(() => {\n    isActiveRef.current = true;\n    setIsMounted(true);\n\n    return () => {\n      isActiveRef.current = false;\n      clearAllTimeouts();\n    };\n  }, [clearAllTimeouts]);\n\n  useEffect(() => {\n    if (isMounted) {\n      startAnimation();\n    }\n  }, [isMounted, startAnimation]);\n\n  const positions = useMemo(\n    () => [\n      { x: 0, y: 0, rotate: 0 },\n      { x: 30, y: -40, rotate: 5 },\n      { x: -35, y: 35, rotate: -6 },\n      { x: 85, y: -20, rotate: 3 },\n      { x: -70, y: 55, rotate: -4 },\n      { x: 100, y: -60, rotate: 4 },\n      { x: -45, y: 20, rotate: -3 },\n      { x: 65, y: -75, rotate: 6 },\n    ],\n    []\n  );\n\n  const fallbackPosition = useMemo(() => ({ x: 0, y: 0, rotate: 0 }), []);\n\n  const getNotificationPosition = useCallback(\n    (index: number) => positions[index] || fallbackPosition,\n    [fallbackPosition, positions]\n  );\n\n  return (\n    <div\n      className={cn(\n        \"relative flex items-center justify-center min-h-[400px] w-full  rounded-xl overflow-hidden\",\n        className\n      )}\n    >\n      <div className=\"relative w-full max-w-4xl h-[400px]\">\n        <AnimatePresence>\n          {isMounted &&\n            visibleNotifications.map((notification, index) => {\n              const position = getNotificationPosition(index);\n              const IconComponent = notification.icon;\n\n              return (\n                <motion.div\n                  key={`${animationCycle}-${notification.id}-${index}`}\n                  className=\"absolute left-1/2 top-1/2 w-80\"\n                  initial={{\n                    opacity: 0,\n                    scale: 0.5,\n                    x: \"-50%\",\n                    y: \"-50%\",\n                    rotate: 0,\n                  }}\n                  animate={{\n                    opacity: animationPhase === \"fading\" ? 0 : 1,\n                    scale: animationPhase === \"fading\" ? 0.5 : 1,\n                    x: `calc(-50% + ${position.x}px)`,\n                    y: `calc(-50% + ${position.y}px)`,\n                    rotate: position.rotate,\n                  }}\n                  exit={{\n                    opacity: 0,\n                    scale: 0.5,\n                    transition: { duration: 0.4, ease: \"easeIn\" },\n                  }}\n                  transition={{\n                    duration: 0.8,\n                    ease: [0.2, 0.8, 0.2, 1],\n                    delay: 0,\n                  }}\n                  style={{\n                    zIndex: index + 1,\n                    willChange: \"transform, opacity\",\n                  }}\n                >\n                  <div className=\"relative overflow-hidden rounded-2xl border border-white/30 dark:border-white/20 shadow-2xl backdrop-blur-2xl bg-white/80 dark:bg-neutral-900/80\">\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-white/50 to-transparent dark:from-white/5 dark:to-transparent\" />\n                    <div className=\"relative p-4\">\n                      <div className=\" gap-3\">\n                        <div className=\"flex-shrink-0 flex\">\n                          <div className=\"flex items-center\">\n                            <div\n                              className={cn(\n                                \"w-5 h-5 rounded-md flex items-center relative justify-center shadow-lg\",\n                                notification.color\n                              )}\n                            >\n                              <IconComponent className=\"w-3 h-3 text-white\" />\n                            </div>\n                            <span className=\"font-semibold ml-2 my-auto text-neutral-900 dark:text-white text-sm mb-0.5 truncate\">\n                              {notification.title}\n                            </span>\n                          </div>\n\n                          <div className=\"ml-auto text-xs text-neutral-500 dark:text-neutral-400\">\n                            {notification.time}\n                          </div>\n                        </div>\n                        <div className=\"flex-1 min-w-0 pt-0.5\">\n                          <p className=\"text-xs text-neutral-700 dark:text-neutral-300 line-clamp-2 leading-relaxed\">\n                            {notification.subtitle}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n              );\n            })}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}",
      "type": "registry:ui",
      "target": "components/ui/spam-notifications.tsx"
    }
  ]
}
